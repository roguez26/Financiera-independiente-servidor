<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Independiente"
                    xmlns:p="clr-namespace:Independiente.Properties"
                    xmlns:conv="clr-namespace:Independiente.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/View/ViewResources/Icons.xaml" />
        <ResourceDictionary Source="pack://application:,,,/View/ViewResources/Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>




    <Style x:Key="IconStyle"
           TargetType="Button">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource IconMouseOverColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Cursor"
                        Value="Hand" />
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource IconPressedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="IconButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource IconStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10">
                        <Grid>
                            <Viewbox Stretch="Uniform">
                                <Canvas Width="24"
                                        Height="24">
                                    <Path Data="{TemplateBinding Tag}"
                                          Fill="{TemplateBinding Foreground}" />
                                </Canvas>
                            </Viewbox>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>








    <Style x:Key="HideIconStyle"
           TargetType="Button"
           BasedOn="{StaticResource IconStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <Viewbox Stretch="Uniform">
                    <Canvas Width="24"
                            Height="24">
                        <Path Data="{DynamicResource HideIcon}"
                              Fill="{StaticResource IconBlackColor}" />
                    </Canvas>
                </Viewbox>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuBarIconStyle"
           TargetType="Button"
           BasedOn="{StaticResource IconStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <Viewbox Stretch="Uniform">
                    <Canvas Width="24"
                            Height="24">
                        <Path Data="{DynamicResource MenuBarIcon}"
                              Fill="{StaticResource IconWhiteColor}" />
                    </Canvas>
                </Viewbox>
            </Setter.Value>
        </Setter>
    </Style>



    <conv:EmptyStringToVisibilityConverter x:Key="EmptyStringToVisibilityConverter" />

    <Style x:Key="TextBoxWithPlaceholderStyle"
           TargetType="TextBox">
        <Setter Property="Background"
                Value="White" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="FontSize"
                Value="10" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="TextAlignment"
                Value="Left" />
        <Setter Property="Padding"
                Value="3" />
        <Setter Property="Height"
                Value="25" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="2"
                            BorderThickness="1">
                        <Grid>
                            <TextBlock Padding="6"
                                       Text="{TemplateBinding Tag}"
                                       Foreground="Gray"
                                       Margin="0,0,0,0"
                                       VerticalAlignment="Center"
                                       IsHitTestVisible="False"
                                       Visibility="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyStringToVisibilityConverter}}" />
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="0"
                                          VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsFocused"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#3498db" />
            </Trigger>

            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#3498db" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="BorderBrush"
                        Value="#dcdcdc" />
                <Setter Property="Background"
                        Value="#dcdcdc" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PasswordBoxWithPlaceholderStyle"
           TargetType="PasswordBox">
        <Setter Property="Background"
                Value="White" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="FontSize"
                Value="10" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="3" />
        <Setter Property="Height"
                Value="25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="2"
                            BorderThickness="1">
                        <Grid>
                            <TextBlock x:Name="PlaceholderText"
                                       Padding="6"
                                       Text="{TemplateBinding Tag}"
                                       Foreground="Gray"
                                       VerticalAlignment="Center"
                                       IsHitTestVisible="False" />

                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="0"
                                          VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsFocused"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#3498db" />
            </Trigger>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#3498db" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonStyle"
           TargetType="Button">
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Padding"
                Value="10,5" />
        <Setter Property="Cursor"
                Value="Hand" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="FontWeight"
                Value="Bold" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>





    <Style x:Key="MainButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource MainButtonStandarColor}" />
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource MainButtonMouseIsOverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource MainButtonIsPressedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="SecondaryButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Foreground"
                Value="{StaticResource SecondaryButtonStandarBorderColor}" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource SecondaryButtonStandarColor}" />
            </Setter.Value>
        </Setter>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2"
                            BorderBrush="{StaticResource SecondaryButtonStandarBorderColor}"
                            BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource SecondaryButtonMouseIsOverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource SecondaryButtonIsPressedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>


    <Style x:Key="DismissButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource DismissButtonStandarColor}" />
            </Setter.Value>
        </Setter>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource DismissButtonMouseIsOverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource DismissButtonIsPressedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="MenuBarButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="Height"
                Value="30" />

        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource MenuBarButtonStandarColor}" />
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource MenuBarButtonMouseIsOverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource MenuBarButtonIsPressedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>


    <Style x:Key="ButtonWithStyle"
           TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                CornerRadius="2"
                                Padding="4" />

                        <StackPanel Orientation="Horizontal"
                                    HorizontalAlignment="Center">
                            <TextBlock Text="{TemplateBinding Content}"
                                       Foreground="White"
                                       FontWeight="Bold"
                                       VerticalAlignment="Center"
                                       Margin="30,0,20,0" />
                            <Path Data="{TemplateBinding Tag}"
                                  Fill="{StaticResource IconWhiteColor}"
                                  Width="24"
                                  Height="24"
                                  VerticalAlignment="Center"
                                  Margin="10,0,20,0" />
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LogOutButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource ButtonWithStyle}">
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="Cursor"
                Value="Hand" />

        <Setter Property="Content"
                Value="{x:Static p:Resources.LogOutButtonLocal}" />
        <Setter Property="Tag"
                Value="{StaticResource LogOutIcon}" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource DangerButtonStandarColor}" />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource DangerButtonMouseIsOverColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource DangerButtonIsPressedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxToggleButtonStyle"
           TargetType="ToggleButton">
        <Setter Property="Width"
                Value="18" />
        <Setter Property="Height"
                Value="18" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="HorizontalAlignment"
                Value="Right" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Foreground"
                Value="Gray" />
        <Setter Property="Content"
                Value="▼" />
    </Style>

    <Style x:Key="ComboBoxWithPlaceholderStyle"
           TargetType="ComboBox">
        <Setter Property="Background"
                Value="White" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="FontSize"
                Value="10" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="4" />
        <Setter Property="Height"
                Value="25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="2"
                            BorderThickness="1">
                        <Grid>
                            <!-- Placeholder cuando no hay selección -->
                            <TextBlock Padding="6"
                                       Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="Gray"
                                       Margin="0,0,0,0"
                                       VerticalAlignment="Center"
                                       IsHitTestVisible="False"
                                       Visibility="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource EmptyStringToVisibilityConverter}}" />

                            <!-- Mostrar el ítem seleccionado -->
                            <ContentPresenter x:Name="ContentPresenter"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Left"
                                              Margin="6,0,25,0"
                                              Content="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" />

                            <!-- Botón para desplegar el combo -->
                            <ToggleButton x:Name="DropDownToggle"
                                          Style="{StaticResource ComboBoxToggleButtonStyle}"
                                          HorizontalAlignment="Right"
                                          VerticalAlignment="Center"
                                          Width="30"
                                          Height="25"
                                          IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                          BorderBrush="Gray"
                                          BorderThickness="1"
                                          Cursor="Hand" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Triggers para el estilo -->
        <Style.Triggers>
            <Trigger Property="SelectedItem"
                     Value="{x:Null}">
                <Setter Property="Tag"
                        Value="Selecciona una opción" />
                <Setter Property="Foreground"
                        Value="Gray" />
            </Trigger>

            <Trigger Property="IsFocused"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#3498db" />
            </Trigger>

            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="#3498db" />
            </Trigger>

            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="BorderBrush"
                        Value="#dcdcdc" />
                <Setter Property="Background"
                        Value="#dcdcdc" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBox">
                            <Grid>
                                <Border BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding Background}">
                                    <TextBlock Text="{TemplateBinding Text}"
                                               Padding="5" />
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>



</ResourceDictionary>